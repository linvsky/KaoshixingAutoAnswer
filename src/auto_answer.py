# coding=utf-8
import sys

reload(sys)
sys.setdefaultencoding('utf8')
import argparse
import os
import time
import logging
from exam_html_parser import ExamHTMLParser
from exam_json_parser import ExamJSONParser
from question_bank import QuestionBank, IlluminaQuestionBank
from exam_api import ExamApi
from common_helper import dict_to_str, StringMatcher


def get_arguments(string_arguments=None):
    parser = argparse.ArgumentParser(description='Kaoshixing Auto Answer')
    parser.add_argument('--question-bank-file', type=str, required=True,
                        help='Question bank file generated by question_bank.py')
    parser.add_argument('--one-by-one-mode', type=bool, required=False, default=True,
                        help='Whether the exam is one by one mode')
    parser.add_argument('--exam-html', type=str, required=True,
                        help='Your exam html saved from web browser')
    parser.add_argument('--cookie-file', type=str, required=True,
                        help='Simple text file stores cookie copied from Fiddler')
    parser.add_argument('--exam-result-id', type=str, required=True,
                        help='examResultId copied from Fiddler')
    parser.add_argument('--exam-info-id', type=str, required=True,
                        help='examInfoId copied from Fiddler')

    if string_arguments:
        args = parser.parse_args(string_arguments)
    else:
        args = parser.parse_args()
    return args


def setup_logger(file_log_folder):
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.setLevel(logging.DEBUG)
    stdout_handler.setFormatter(logging.Formatter('%(asctime)s: %(message)s'))
    stdout_handler.encoding = 'utf-8'
    time_string = time.strftime('%Y-%m-%d %H.%M.%S', time.localtime(time.time()))

    if not os.path.exists(file_log_folder):
        os.makedirs(file_log_folder)
    log_filename = os.path.join(file_log_folder, '%s.log' % time_string)
    file_handler = logging.FileHandler(log_filename)
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(logging.Formatter('%(asctime)s: %(message)s'))
    file_handler.encoding = 'utf-8'
    logger.addHandler(stdout_handler)
    logger.addHandler(file_handler)
    return logger


if __name__ == '__main__':
    logger = setup_logger(os.path.join(os.path.split(__file__)[0], 'Logs'))
    args = get_arguments()
    logger.info('Parameters:\n' + dict_to_str(args.__dict__) + '\n\n')

    if args.one_by_one_mode:
        # Step 1: parse exam html to get current exam questions ids
        logger.debug('Parsing %s\n\n' % args.exam_html)
        html_parser = ExamHTMLParser(args.exam_html)
        questions_ids = html_parser.get_questions_ids()
        logger.debug('IDs of questions for this exam are:\n' + '\n'.join(questions_ids) + '\n\n')

        # Step 2: Send HTTP POST to fetch all exam questions
        cookie = ExamApi.parse_cookie(args.cookie_file)
        logger.debug('Cookie loaded:\n' + cookie + '\n\n')

        api = ExamApi(cookie)
        logger.debug('Downloading question JSON\n\n')
        questions_json = api.get_one_by_one_questions(questions_ids, args.exam_info_id, args.exam_result_id)
        questions_json = questions_json.decode()
        logger.info('Question JSON has been downloaded\n\n')

        questions_json_file_path = os.path.join(os.path.split(args.exam_html)[0], 'questions_json.json')
        with open(questions_json_file_path, mode='w+') as questions_json_file:
            questions_json_file.write(questions_json)
        logger.debug('Question JSON has been saved into:\n' + questions_json_file_path + '\n\n')

        json_parser = ExamJSONParser(questions_json_file_path)
        exam_questions = json_parser.get_questions()
        logger.info('Question JSON has been parsed into memory object' + '\n\n')

        # Step 3: Find answers for all exam questions in question bank
        question_bank = IlluminaQuestionBank()
        question_bank.load_from_file(args.question_bank_file)
        logger.info('Question bank has been loaded into memory (%d questions)' % len(question_bank) + '\n\n')

        answers = {}
        answers_info = {}
        missed_questions = []
        title_matcher = StringMatcher(3)
        answer_matcher = StringMatcher(0)
        for test_id, test in exam_questions.iteritems():
            exam_question_title = test['title']
            exam_answer_matrix = test['answers']
            raw_answers = []
            # Match exam_question_title in question_bank -> will get expected raw answers of raw question
            if exam_question_title in question_bank:
                raw_answers = question_bank[exam_question_title]
            else:
                for bank_question_title, bank_question_answers in question_bank.iteritems():
                    matched = title_matcher.match(exam_question_title, bank_question_title)
                    if matched:
                        raw_answers = question_bank[bank_question_title]
                        break

            # Match raw answers in exam_answer_matrix -> will get keys of answers
            test_ans_keys = []
            for raw_answer in raw_answers:
                for ans_key, ans_title in exam_answer_matrix.iteritems():
                    if raw_answer == ans_title:
                        test_ans_keys.append(ans_key)
                        break
                    else:
                        matched = answer_matcher.match(ans_title, raw_answer)
                        if matched:
                            test_ans_keys.append(ans_key)
                            break

            if len(test_ans_keys) > 0:
                # Assembly results
                answers[test_id] = ','.join(test_ans_keys)
                answers_info[test_id] = {}
                answers_info[test_id]['title'] = exam_question_title
                answers_info[test_id]['answers'] = raw_answers
            else:
                missed_questions.append(exam_question_title)

        # Step 4: Print summary
        logger.info('There are %d questions in this exam' % len(exam_questions))
        logger.info('    found %d answer(s)' % len(answers))
        logger.info('   missed %d question(s), there are:\n%s\n\n'
                    % (len(missed_questions), '\n'.join(missed_questions)))

        # Step 5: Submit answers of all exam questions respectively
        for test_id, test_ans in answers.iteritems():
            logger.debug('Submitting answer:\nQuestion: %s\nAnswer: %s\n\n'
                         % (answers_info[test_id]['title'].decode(),
                            ' | '.join([item.decode() for item in answers_info[test_id]['answers']])))
            api.submit_one_by_one_test_answer(test_id, test_ans, args.exam_info_id, args.exam_result_id)
            time.sleep(0.1)

        logger.info('FINISHED! Go to exam web page to submit the exam, enjoy ^_^')
